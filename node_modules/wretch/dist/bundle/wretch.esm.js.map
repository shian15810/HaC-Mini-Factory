{"version":3,"file":"wretch.esm.js","sources":["../../src/mix.ts","../../src/config.ts","../../src/perfs.ts","../../src/resolver.ts","../../src/wretcher.ts","../../src/middleware.ts","../../src/index.umd.ts"],"sourcesContent":["export const mix = function (one: object, two: object, mergeArrays: boolean = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return one\n\n    const clone = { ...one }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = mix(one[prop], two[prop], mergeArrays)\n            } else {\n                clone[prop] = two[prop]\n            }\n        }\n    }\n\n    return clone\n}\n","declare const global\n\nconst config = {\n    // Default options\n    defaults: {},\n    // Error type\n    errorType: null,\n    // Polyfills\n    polyfills: {\n        fetch: null,\n        FormData: null,\n        URLSearchParams: null,\n        performance: null,\n        PerformanceObserver: null,\n        AbortController: null\n    },\n    polyfill(p: string, { doThrow = true, instance = false } = {}, ...args) {\n        const res = this.polyfills[p] ||\n            (typeof self !== \"undefined\" ? self[p] : null) ||\n            (typeof global !== \"undefined\" ? global[p] : null)\n        if(doThrow && !res) throw new Error(p + \" is not defined\")\n        return instance && res ? new res(...args) : res\n    }\n}\n\nexport default config\n","import conf from \"./config\"\n\nconst onMatch = (entries, name, callback, _performance) => {\n    if(!entries.getEntriesByName)\n        return false\n    const matches = entries.getEntriesByName(name)\n    if(matches && matches.length > 0) {\n        callback(matches.reverse()[0])\n        if(_performance.clearMeasures)\n            _performance.clearMeasures(name)\n        perfs.callbacks.delete(name)\n\n        if(perfs.callbacks.size < 1) {\n            perfs.observer.disconnect()\n            if(_performance.clearResourceTimings) {\n                _performance.clearResourceTimings()\n            }\n        }\n        return true\n    }\n    return false\n}\n\nconst lazyObserver = (_performance, _observer) => {\n    if(!perfs.observer && _performance && _observer) {\n        perfs.observer = new _observer(entries => {\n            perfs.callbacks.forEach((callback, name) => {\n                onMatch(entries, name, callback, _performance)\n            })\n        })\n        if(_performance.clearResourceTimings)\n            _performance.clearResourceTimings()\n    }\n    return perfs.observer\n}\n\nconst perfs = {\n    callbacks: new Map(),\n    observer: null,\n    observe: (name, callback) => {\n        if(!name || !callback)\n            return\n\n        const _performance = conf.polyfill(\"performance\", { doThrow: false })\n        const _observer  = conf.polyfill(\"PerformanceObserver\", { doThrow: false })\n\n        if(!lazyObserver(_performance, _observer))\n            return\n\n        if(!onMatch(_performance, name, callback, _performance)) {\n            if(perfs.callbacks.size < 1)\n                perfs.observer.observe({ entryTypes: [\"resource\", \"measure\"] })\n            perfs.callbacks.set(name, callback)\n        }\n\n    }\n}\n\nexport default perfs\n","import { Wretcher } from \"./wretcher\"\nimport { mix } from \"./mix\"\nimport conf from \"./config\"\nimport perfs from \"./perfs\"\nimport { middlewareHelper } from \"./middleware\"\n\nexport type WretcherError = Error & { status: number, response: WretcherResponse, text?: string, json?: any }\nexport type WretcherErrorCallback = (error: WretcherError, originalRequest: Wretcher) => any\nexport type WretcherResponse = Response & { [key: string]: any }\nexport type ResponseChain = {\n    // Response types\n    res: <Result = WretcherResponse>(cb?: (type: WretcherResponse) => Result) => Promise<Result>,\n    json: <Result = {[key: string]: any}>(cb?: (type: {[key: string]: any}) => Result) => Promise<Result>,\n    blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n    formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n    arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n    text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n    // Extras\n    perfs: (cb?: (timing: any) => void) => ResponseChain,\n    setTimeout: (time: number, controller?: AbortController) => ResponseChain,\n    controller: () => [any, ResponseChain],\n    // Catchers\n    error: (code: (number | string), cb: WretcherErrorCallback) => ResponseChain,\n    badRequest: (cb: WretcherErrorCallback) => ResponseChain,\n    unauthorized: (cb: WretcherErrorCallback) => ResponseChain,\n    forbidden: (cb: WretcherErrorCallback) => ResponseChain,\n    notFound: (cb: WretcherErrorCallback) => ResponseChain,\n    timeout: (cb: WretcherErrorCallback) => ResponseChain,\n    internalError: (cb: WretcherErrorCallback) => ResponseChain,\n    fetchError: (cb: WretcherErrorCallback) => ResponseChain,\n    onAbort: (cb: WretcherErrorCallback) => ResponseChain\n}\n\nclass WretchErrorWrapper {\n    constructor(public error: any) {}\n}\n\nexport const resolver = (wretcher: Wretcher) => {\n    const {\n        _url: url,\n        _catchers: _catchers,\n        _resolvers: resolvers,\n        _middlewares: middlewares,\n        _options: opts\n    } = wretcher\n    const catchers = new Map(_catchers)\n    const finalOptions = mix(conf.defaults, opts)\n    const fetchController = conf.polyfill(\"AbortController\", { doThrow: false, instance: true })\n    if(!finalOptions[\"signal\"] && fetchController) {\n        finalOptions[\"signal\"] = fetchController.signal\n    }\n    // Request timeout\n    const timeout = {\n        ref: null,\n        clear() {\n            if(timeout.ref) {\n                clearTimeout(timeout.ref)\n                timeout.ref = null\n            }\n        }\n    }\n    // The generated fetch request\n    const fetchRequest = middlewareHelper(middlewares)(conf.polyfill(\"fetch\"))(url, finalOptions)\n    // Throws on an http error\n    const throwingPromise: Promise<void | WretcherResponse> = fetchRequest\n        .catch(error => {\n            throw new WretchErrorWrapper(error)\n        })\n        .then(response => {\n            timeout.clear()\n            if (!response.ok) {\n                return response[conf.errorType || \"text\"]().then(msg => {\n                    // Enhances the error object\n                    const err = new Error(msg)\n                    err[conf.errorType || \"text\"] = msg\n                    err[\"status\"] = response.status\n                    err[\"response\"] = response\n                    throw err\n                })\n            }\n            return response\n        })\n    // Wraps the Promise in order to dispatch the error to a matching catcher\n    const catchersWrapper = <T>(promise: Promise<T>): Promise<void | T> => {\n        return promise.catch(err => {\n            timeout.clear()\n            const error = err instanceof WretchErrorWrapper ? err.error : err\n            if(err instanceof WretchErrorWrapper && catchers.has(\"__fromFetch\"))\n                return catchers.get(\"__fromFetch\")(error, wretcher)\n            else if(catchers.has(error.status))\n                return catchers.get(error.status)(error, wretcher)\n            else if(catchers.has(error.name))\n                return catchers.get(error.name)(error, wretcher)\n            else\n                throw error\n        })\n    }\n    // Enforces the proper promise type when a body parsing method is called.\n    type BodyParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n    const bodyParser: BodyParser = <T>(funName) => <R>(cb) => funName ?\n        // If a callback is provided, then callback with the body result otherwise return the parsed body itself.\n        catchersWrapper(throwingPromise.then(_ => _ && _[funName]()).then(_ => cb ? cb(_) : _)) :\n        // No body parsing method - return the response\n        catchersWrapper(throwingPromise.then(_ => cb ? cb(_) : _))\n\n    const responseChain: ResponseChain = {\n        /**\n         * Retrieves the raw result as a promise.\n         */\n        res: bodyParser<WretcherResponse>(null),\n        /**\n         * Retrieves the result as a parsed JSON object.\n         */\n        json: bodyParser<any>(\"json\"),\n        /**\n         * Retrieves the result as a Blob object.\n         */\n        blob: bodyParser<Blob>(\"blob\"),\n        /**\n         * Retrieves the result as a FormData object.\n         */\n        formData: bodyParser<FormData>(\"formData\"),\n        /**\n         * Retrieves the result as an ArrayBuffer object.\n         */\n        arrayBuffer: bodyParser<ArrayBuffer>(\"arrayBuffer\"),\n        /**\n         * Retrieves the result as a string.\n         */\n        text: bodyParser<string>(\"text\"),\n        /**\n         * Performs a callback on the API performance timings of the request.\n         *\n         * Warning: Still experimental on browsers and node.js\n         */\n        perfs: cb => {\n            fetchRequest.then(res => perfs.observe(res.url, cb))\n            return responseChain\n        },\n        /**\n         * Aborts the request after a fixed time.\n         *\n         * @param time Time in milliseconds\n         * @param controller A custom controller\n         */\n        setTimeout: (time, controller = fetchController) => {\n            timeout.clear()\n            timeout.ref = setTimeout(() => controller.abort(), time)\n            return responseChain\n        },\n        /**\n         * Returns the automatically generated AbortController alongside the current wretch response as a pair.\n         */\n        controller: () => [ fetchController, responseChain ],\n        /**\n         * Catches an http response with a specific error code or name and performs a callback.\n         */\n        error(errorId, cb) {\n            catchers.set(errorId, cb)\n            return responseChain\n        },\n        /**\n         * Catches a bad request (http code 400) and performs a callback.\n         */\n        badRequest: cb => responseChain.error(400, cb),\n        /**\n         * Catches an unauthorized request (http code 401) and performs a callback.\n         */\n        unauthorized: cb => responseChain.error(401, cb),\n        /**\n         * Catches a forbidden request (http code 403) and performs a callback.\n         */\n        forbidden: cb => responseChain.error(403, cb),\n        /**\n         * Catches a \"not found\" request (http code 404) and performs a callback.\n         */\n        notFound: cb => responseChain.error(404, cb),\n        /**\n         * Catches a timeout (http code 408) and performs a callback.\n         */\n        timeout: cb => responseChain.error(408, cb),\n        /**\n         * Catches an internal server error (http code 500) and performs a callback.\n         */\n        internalError: cb => responseChain.error(500, cb),\n        /**\n         * Catches errors thrown when calling the fetch function and performs a callback.\n         */\n        fetchError: cb => responseChain.error(\"__fromFetch\", cb),\n        /**\n         * Catches an AbortError and performs a callback.\n         */\n        onAbort: cb => responseChain.error(\"AbortError\", cb)\n    }\n\n    return resolvers.reduce((chain, r) => r(chain, wretcher), responseChain) as (ResponseChain & Promise<any>)\n}\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport { resolver, WretcherError, ResponseChain } from \"./resolver\"\nimport { ConfiguredMiddleware } from \"./middleware\"\n\nexport type WretcherOptions = RequestInit & {\n    [key: string]: any\n}\n\nexport type DeferredCallback = (wretcher: Wretcher, url: string, options: WretcherOptions) => Wretcher\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    protected constructor(\n        public _url: string,\n        public _options: WretcherOptions,\n        public _catchers: Map<number | string, (error: WretcherError, originalRequest: Wretcher) => void> = new Map(),\n        public _resolvers: ((resolver: ResponseChain, originalRequest: Wretcher) => any)[] = [],\n        public _middlewares: ConfiguredMiddleware[] = [],\n        public _deferredChain: DeferredCallback[] = []) {}\n\n    static factory(url = \"\", options: WretcherOptions = {}) { return new Wretcher(url, options) }\n    private selfFactory({ url = this._url, options = this._options, catchers = this._catchers,\n                resolvers = this._resolvers, middlewares = this._middlewares, deferredChain = this._deferredChain } = {}) {\n        return new Wretcher(url, {...options}, new Map(catchers), [...resolvers], [...middlewares], [...deferredChain])\n    }\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param options New default options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    defaults(options: WretcherOptions, mixin = false) {\n        conf.defaults = mixin ? mix(conf.defaults, options) : options\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Sets the non-global polyfills which will be used for every subsequent calls.\n     *\n     * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n     *\n     * @param polyfills An object containing the polyfills.\n     */\n    polyfills(polyfills: Partial<typeof conf.polyfills>) {\n        conf.polyfills = { ...conf.polyfills, ...polyfills }\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the argument url appended and the same options.\n     * @param url String url\n     * @param replace Boolean If true, replaces the current url instead of appending\n     */\n    url(url: string, replace = false) {\n        if(replace)\n            return this.selfFactory({ url })\n        const split = this._url.split(\"?\")\n        return this.selfFactory({\n            url: split.length > 1 ?\n                split[0] + url + \"?\" + split[1] :\n                this._url + url\n        })\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    options(options: WretcherOptions, mixin = true) {\n        return this.selfFactory({ options: mixin ? mix(this._options, options) : options })\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * If given a string, use the string as the query verbatim.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     *\n     * // Chain query calls\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * w = w.query(\"foo-bar-baz-woz\") // url is now http://example.com?a=1&b=2&foo-bar-baz-woz\n     *\n     * // Pass true as the second argument to replace existing query parameters\n     * w = w.query(\"c=3&d=4\", true) // url is now http://example.com?c=3&d=4\n     * ```\n     *\n     * @param qp An object which will be converted, or a string which will be used verbatim.\n     */\n    query(qp: object | string, replace: boolean = false) {\n        return this.selfFactory({ url: appendQueryParams(this._url, qp, replace) })\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: string }) {\n        return this.selfFactory({ options: mix(this._options, { headers: headerValues || {} }) })\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Authorization\" header.\n     * @param headerValue Header value\n     */\n    auth(headerValue: string) {\n        return this.headers({ Authorization: headerValue })\n    }\n\n    /**\n     * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n     * @param errorId Error code or name\n     * @param catcher: The catcher method\n     */\n    catcher(errorId: number | string, catcher: (error: WretcherError, originalRequest: Wretcher) => any) {\n        const newMap = new Map(this._catchers)\n        newMap.set(errorId, catcher)\n        return this.selfFactory({ catchers: newMap })\n    }\n\n    /**\n     * Associates a custom signal with the request.\n     * @param controller : An AbortController\n     */\n    signal(controller: AbortController) {\n        return this.selfFactory({ options: { ...this._options, signal: controller.signal }})\n    }\n\n    /**\n     * Program a resolver to perform response chain tasks automatically.\n     * @param doResolve : Resolver callback\n     */\n    resolve(doResolve: (chain: ResponseChain, originalRequest: Wretcher) => ResponseChain | Promise<any>, clear: boolean = false) {\n        return this.selfFactory({ resolvers: clear ? [ doResolve ] : [ ...this._resolvers, doResolve ]})\n    }\n\n    /**\n     * Defer wretcher methods that will be chained and called just before the request is performed.\n     */\n    defer(callback: DeferredCallback, clear = false) {\n        return this.selfFactory({\n            deferredChain: clear ? [callback] : [ ...this._deferredChain, callback ]\n        })\n    }\n\n    /**\n     * Add middlewares to intercept a request before being sent.\n     */\n    middlewares(middlewares: ConfiguredMiddleware[], clear = false) {\n        return this.selfFactory({\n            middlewares: clear ? middlewares : [ ...this._middlewares, ...middlewares ]\n        })\n    }\n\n    private method(method, options = {}, body = null) {\n        let baseWretcher =\n            !body ? this :\n            typeof body === \"object\" ? this.json(body) :\n            this.body(body)\n        baseWretcher = baseWretcher.options({ ...options, method })\n        const deferredWretcher = baseWretcher._deferredChain.reduce((acc: Wretcher, curr) => curr(acc, acc._url, acc._options), baseWretcher)\n        return resolver(deferredWretcher)\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(options?) {\n        return this.method(\"GET\", options)\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(options?) {\n        return this.method(\"DELETE\", options)\n    }\n    /**\n     * Performs a put request.\n     */\n    put(body?, options?) {\n        return this.method(\"PUT\", options, body)\n    }\n    /**\n     * Performs a post request.\n     */\n    post(body?, options?) {\n        return this.method(\"POST\", options, body)\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(body?, options?) {\n        return this.method(\"PATCH\", options, body)\n    }\n    /**\n     * Performs a head request.\n     */\n    head(options?) {\n        return this.method(\"HEAD\", options)\n    }\n    /**\n     * Performs an options request\n     */\n    opts(options?) {\n        return this.method(\"OPTIONS\", options)\n    }\n    /**\n     * Replay a request.\n     */\n    replay(options?) {\n        return this.method(this._options.method, options)\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return this.selfFactory({ options: { ...this._options, body: contents }})\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     * @param recursive If `true`, will recurse through all nested objects\n     * Can be set as an array of string to exclude specific keys.\n     * See https://github.com/elbywan/wretch/issues/68 for more details.\n     */\n    formData(formObject: object, recursive: string[] | boolean = false) {\n        return this.body(convertFormData(formObject, recursive))\n    }\n    /**\n     * Converts the input to an url encoded string and sets the content-type header and body.\n     * If the input argument is already a string, skips the conversion part.\n     *\n     * @param input An object to convert into an url encoded string or an already encoded string\n     */\n    formUrl(input: (object | string)) {\n        return this\n            .body(typeof input === \"string\" ? input : convertFormUrl(input))\n            .content(\"application/x-www-form-urlencoded\")\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object | string, replace: boolean) => {\n    let queryString\n\n    if(typeof qp === \"string\") {\n        queryString = qp\n    } else {\n        const usp = conf.polyfill(\"URLSearchParams\", { instance: true })\n        for(const key in qp) {\n            if(qp[key] instanceof Array) {\n                for(const val of qp[key])\n                    usp.append(key, val)\n            } else {\n                usp.append(key, qp[key])\n            }\n        }\n        queryString = usp.toString()\n    }\n\n    const split = url.split(\"?\")\n    if(replace || split.length < 2)\n        return split[0] + \"?\" + queryString\n\n    return url + \"&\" + queryString\n}\n\nfunction convertFormData(\n    formObject: object,\n    recursive: string[] | boolean = false,\n    formData =  conf.polyfill(\"FormData\", { instance: true }),\n    ancestors = []\n) {\n    Object.entries(formObject).forEach(([key, value]) => {\n        let formKey = ancestors.reduce((acc, ancestor) => (\n            acc ? `${acc}[${ancestor}]` : ancestor\n        ), null)\n        formKey = formKey ? `${formKey}[${key}]` : key\n        if(value instanceof Array) {\n            for(const item of value)\n                formData.append(formKey + \"[]\", item)\n        } else if(\n            recursive &&\n            typeof value === \"object\" &&\n            (\n                !(recursive instanceof Array) ||\n                !recursive.includes(key)\n            )\n        ) {\n            if(value !== null) {\n                convertFormData(value, recursive, formData, [...ancestors, key])\n            }\n        } else {\n            formData.append(formKey, value)\n        }\n    })\n\n    return formData\n}\n\nfunction encodeQueryValue(key: string, value: unknown) {\n    return encodeURIComponent(key) +\n    \"=\" +\n    encodeURIComponent(\n        typeof value === \"object\" ?\n            JSON.stringify(value) :\n        \"\" + value\n    )\n}\nfunction convertFormUrl(formObject: object) {\n    return Object.keys(formObject)\n        .map(key => {\n            const value = formObject[key]\n            if(value instanceof Array) {\n                return value.map(v => encodeQueryValue(key, v)).join(\"&\")\n            }\n            return encodeQueryValue(key, value)\n        })\n        .join(\"&\")\n}\n","import { WretcherOptions } from \"./wretcher\"\nimport { WretcherResponse } from \"./resolver\"\n\nexport type Middleware = (options?: {[key: string]: any}) => ConfiguredMiddleware\nexport type ConfiguredMiddleware = (next: FetchLike) => FetchLike\nexport type FetchLike = (url: string, opts: WretcherOptions) => Promise<WretcherResponse>\n\nexport const middlewareHelper = (middlewares: ConfiguredMiddleware[]) => (fetchFunction: FetchLike): FetchLike => {\n    return (\n        middlewares.length === 0 ?\n           fetchFunction :\n        middlewares.length === 1 ?\n            middlewares[0](fetchFunction) :\n        middlewares.reduceRight((acc, curr, idx): any =>\n            (idx === middlewares.length - 2) ? curr(acc(fetchFunction)) : curr(acc as any)\n        )\n    ) as FetchLike\n}\n","import { Wretcher } from \"./wretcher\"\n\nconst factory = Wretcher.factory\nfactory[\"default\"] = Wretcher.factory\n\n/**\n * Return a fresh Wretcher instance.\n */\nexport default factory\n"],"names":["mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","config","defaults","errorType","polyfills","fetch","FormData","URLSearchParams","performance","PerformanceObserver","AbortController","polyfill","p","_a","_b","_c","doThrow","_d","instance","_i","args","res","this","self","global","Error","onMatch","entries","name","callback","_performance","getEntriesByName","matches","length","reverse","clearMeasures","perfs","callbacks","delete","size","observer","disconnect","clearResourceTimings","Map","observe","conf","_observer","forEach","lazyObserver","entryTypes","set","error","_url","_options","_catchers","_resolvers","_middlewares","_deferredChain","Wretcher","url","options","_e","catchers","_f","resolvers","_g","middlewares","_h","deferredChain","mixin","method","replace","selfFactory","split","qp","appendQueryParams","headerValues","headers","headerValue","Accept","Content-Type","Authorization","errorId","catcher","newMap","controller","signal","doResolve","clear","body","baseWretcher","json","wretcher","opts","finalOptions","fetchController","timeout","ref","clearTimeout","fetchRequest","fetchFunction","reduceRight","acc","curr","idx","middlewareHelper","throwingPromise","catch","WretchErrorWrapper","then","response","ok","msg","err","status","catchersWrapper","promise","has","get","bodyParser","funName","cb","_","responseChain","blob","formData","arrayBuffer","text","setTimeout","time","abort","badRequest","unauthorized","forbidden","notFound","internalError","fetchError","onAbort","reduce","chain","r","resolver","contents","jsObject","content","JSON","stringify","formObject","recursive","convertFormData","ancestors","Object","key","value","formKey","ancestor","value_1","item","append","includes","input","keys","map","v","encodeQueryValue","join","queryString","usp","val","toString","encodeURIComponent","factory"],"mappings":"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"}