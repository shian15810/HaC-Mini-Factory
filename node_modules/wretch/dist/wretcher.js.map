{"version":3,"file":"wretcher.js","sourceRoot":"","sources":["../src/wretcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport { resolver, WretcherError, ResponseChain } from \"./resolver\"\nimport { ConfiguredMiddleware } from \"./middleware\"\n\nexport type WretcherOptions = RequestInit & {\n    [key: string]: any\n}\n\nexport type DeferredCallback = (wretcher: Wretcher, url: string, options: WretcherOptions) => Wretcher\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    protected constructor(\n        public _url: string,\n        public _options: WretcherOptions,\n        public _catchers: Map<number | string, (error: WretcherError, originalRequest: Wretcher) => void> = new Map(),\n        public _resolvers: ((resolver: ResponseChain, originalRequest: Wretcher) => any)[] = [],\n        public _middlewares: ConfiguredMiddleware[] = [],\n        public _deferredChain: DeferredCallback[] = []) {}\n\n    static factory(url = \"\", options: WretcherOptions = {}) { return new Wretcher(url, options) }\n    private selfFactory({ url = this._url, options = this._options, catchers = this._catchers,\n                resolvers = this._resolvers, middlewares = this._middlewares, deferredChain = this._deferredChain } = {}) {\n        return new Wretcher(url, {...options}, new Map(catchers), [...resolvers], [...middlewares], [...deferredChain])\n    }\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param options New default options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    defaults(options: WretcherOptions, mixin = false) {\n        conf.defaults = mixin ? mix(conf.defaults, options) : options\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Sets the non-global polyfills which will be used for every subsequent calls.\n     *\n     * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n     *\n     * @param polyfills An object containing the polyfills.\n     */\n    polyfills(polyfills: Partial<typeof conf.polyfills>) {\n        conf.polyfills = { ...conf.polyfills, ...polyfills }\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the argument url appended and the same options.\n     * @param url String url\n     * @param replace Boolean If true, replaces the current url instead of appending\n     */\n    url(url: string, replace = false) {\n        if(replace)\n            return this.selfFactory({ url })\n        const split = this._url.split(\"?\")\n        return this.selfFactory({\n            url: split.length > 1 ?\n                split[0] + url + \"?\" + split[1] :\n                this._url + url\n        })\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    options(options: WretcherOptions, mixin = true) {\n        return this.selfFactory({ options: mixin ? mix(this._options, options) : options })\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * If given a string, use the string as the query verbatim.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     *\n     * // Chain query calls\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * w = w.query(\"foo-bar-baz-woz\") // url is now http://example.com?a=1&b=2&foo-bar-baz-woz\n     *\n     * // Pass true as the second argument to replace existing query parameters\n     * w = w.query(\"c=3&d=4\", true) // url is now http://example.com?c=3&d=4\n     * ```\n     *\n     * @param qp An object which will be converted, or a string which will be used verbatim.\n     */\n    query(qp: object | string, replace: boolean = false) {\n        return this.selfFactory({ url: appendQueryParams(this._url, qp, replace) })\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: string }) {\n        return this.selfFactory({ options: mix(this._options, { headers: headerValues || {} }) })\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Authorization\" header.\n     * @param headerValue Header value\n     */\n    auth(headerValue: string) {\n        return this.headers({ Authorization: headerValue })\n    }\n\n    /**\n     * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n     * @param errorId Error code or name\n     * @param catcher: The catcher method\n     */\n    catcher(errorId: number | string, catcher: (error: WretcherError, originalRequest: Wretcher) => any) {\n        const newMap = new Map(this._catchers)\n        newMap.set(errorId, catcher)\n        return this.selfFactory({ catchers: newMap })\n    }\n\n    /**\n     * Associates a custom signal with the request.\n     * @param controller : An AbortController\n     */\n    signal(controller: AbortController) {\n        return this.selfFactory({ options: { ...this._options, signal: controller.signal }})\n    }\n\n    /**\n     * Program a resolver to perform response chain tasks automatically.\n     * @param doResolve : Resolver callback\n     */\n    resolve(doResolve: (chain: ResponseChain, originalRequest: Wretcher) => ResponseChain | Promise<any>, clear: boolean = false) {\n        return this.selfFactory({ resolvers: clear ? [ doResolve ] : [ ...this._resolvers, doResolve ]})\n    }\n\n    /**\n     * Defer wretcher methods that will be chained and called just before the request is performed.\n     */\n    defer(callback: DeferredCallback, clear = false) {\n        return this.selfFactory({\n            deferredChain: clear ? [callback] : [ ...this._deferredChain, callback ]\n        })\n    }\n\n    /**\n     * Add middlewares to intercept a request before being sent.\n     */\n    middlewares(middlewares: ConfiguredMiddleware[], clear = false) {\n        return this.selfFactory({\n            middlewares: clear ? middlewares : [ ...this._middlewares, ...middlewares ]\n        })\n    }\n\n    private method(method, options = {}, body = null) {\n        let baseWretcher =\n            !body ? this :\n            typeof body === \"object\" ? this.json(body) :\n            this.body(body)\n        baseWretcher = baseWretcher.options({ ...options, method })\n        const deferredWretcher = baseWretcher._deferredChain.reduce((acc: Wretcher, curr) => curr(acc, acc._url, acc._options), baseWretcher)\n        return resolver(deferredWretcher)\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(options?) {\n        return this.method(\"GET\", options)\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(options?) {\n        return this.method(\"DELETE\", options)\n    }\n    /**\n     * Performs a put request.\n     */\n    put(body?, options?) {\n        return this.method(\"PUT\", options, body)\n    }\n    /**\n     * Performs a post request.\n     */\n    post(body?, options?) {\n        return this.method(\"POST\", options, body)\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(body?, options?) {\n        return this.method(\"PATCH\", options, body)\n    }\n    /**\n     * Performs a head request.\n     */\n    head(options?) {\n        return this.method(\"HEAD\", options)\n    }\n    /**\n     * Performs an options request\n     */\n    opts(options?) {\n        return this.method(\"OPTIONS\", options)\n    }\n    /**\n     * Replay a request.\n     */\n    replay(options?) {\n        return this.method(this._options.method, options)\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return this.selfFactory({ options: { ...this._options, body: contents }})\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     * @param recursive If `true`, will recurse through all nested objects\n     * Can be set as an array of string to exclude specific keys.\n     * See https://github.com/elbywan/wretch/issues/68 for more details.\n     */\n    formData(formObject: object, recursive: string[] | boolean = false) {\n        return this.body(convertFormData(formObject, recursive))\n    }\n    /**\n     * Converts the input to an url encoded string and sets the content-type header and body.\n     * If the input argument is already a string, skips the conversion part.\n     *\n     * @param input An object to convert into an url encoded string or an already encoded string\n     */\n    formUrl(input: (object | string)) {\n        return this\n            .body(typeof input === \"string\" ? input : convertFormUrl(input))\n            .content(\"application/x-www-form-urlencoded\")\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object | string, replace: boolean) => {\n    let queryString\n\n    if(typeof qp === \"string\") {\n        queryString = qp\n    } else {\n        const usp = conf.polyfill(\"URLSearchParams\", { instance: true })\n        for(const key in qp) {\n            if(qp[key] instanceof Array) {\n                for(const val of qp[key])\n                    usp.append(key, val)\n            } else {\n                usp.append(key, qp[key])\n            }\n        }\n        queryString = usp.toString()\n    }\n\n    const split = url.split(\"?\")\n    if(replace || split.length < 2)\n        return split[0] + \"?\" + queryString\n\n    return url + \"&\" + queryString\n}\n\nfunction convertFormData(\n    formObject: object,\n    recursive: string[] | boolean = false,\n    formData =  conf.polyfill(\"FormData\", { instance: true }),\n    ancestors = []\n) {\n    Object.entries(formObject).forEach(([key, value]) => {\n        let formKey = ancestors.reduce((acc, ancestor) => (\n            acc ? `${acc}[${ancestor}]` : ancestor\n        ), null)\n        formKey = formKey ? `${formKey}[${key}]` : key\n        if(value instanceof Array) {\n            for(const item of value)\n                formData.append(formKey + \"[]\", item)\n        } else if(\n            recursive &&\n            typeof value === \"object\" &&\n            (\n                !(recursive instanceof Array) ||\n                !recursive.includes(key)\n            )\n        ) {\n            if(value !== null) {\n                convertFormData(value, recursive, formData, [...ancestors, key])\n            }\n        } else {\n            formData.append(formKey, value)\n        }\n    })\n\n    return formData\n}\n\nfunction encodeQueryValue(key: string, value: unknown) {\n    return encodeURIComponent(key) +\n    \"=\" +\n    encodeURIComponent(\n        typeof value === \"object\" ?\n            JSON.stringify(value) :\n        \"\" + value\n    )\n}\nfunction convertFormUrl(formObject: object) {\n    return Object.keys(formObject)\n        .map(key => {\n            const value = formObject[key]\n            if(value instanceof Array) {\n                return value.map(v => encodeQueryValue(key, v)).join(\"&\")\n            }\n            return encodeQueryValue(key, value)\n        })\n        .join(\"&\")\n}\n"]}